# エラーページ設定
ErrorDocument 404 /404.html

# XMLRPCへのアクセスをブロック
<Files xmlrpc.php>
  Order Deny,Allow
  Deny from all
</Files>

# キャッシュ制御
<IfModule mod_headers.c>
  # デバッグヘッダーを追加 - X-Debug-Info
  Header set X-Debug-Mode "true"
  Header set X-Script-Mode "production"
  Header set X-CSP-Nonce "oneWill2024"
  
  # 静的ファイルのキャッシュ制御
  <FilesMatch "\.(html|htm)$">
    Header set Cache-Control "max-age=0, must-revalidate"
  </FilesMatch>
  
  <FilesMatch "\.(js|css)$">
    Header set Cache-Control "max-age=604800, public"
    # JSファイルへのアクセスをログ
    Header set X-JS-Loaded "true"
  </FilesMatch>
  
  <FilesMatch "\.(ico|pdf|jpg|jpeg|png|webp|gif|svg)$">
    Header set Cache-Control "max-age=2592000, public"
  </FilesMatch>
  
  # CORS設定
  Header set Access-Control-Allow-Origin "*"
  
  # セキュリティヘッダー
  Header always set X-Content-Type-Options "nosniff"
  Header always set X-XSS-Protection "1; mode=block"
  Header always set X-Frame-Options "SAMEORIGIN"
  Header always set Referrer-Policy "strict-origin-when-cross-origin"
  
  # ブラウザキャッシュの最適化
  Header unset ETag
  FileETag None

  # CSPヘッダーの追加
  Header set Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' 'nonce-oneWill2024' https://code.jquery.com https://unpkg.com https://cdnjs.cloudflare.com https://cdn.jsdelivr.net https://www.clarity.ms https://www.googletagmanager.com https://www.google-analytics.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com https://unpkg.com https://cdn.jsdelivr.net; font-src 'self' data: https://fonts.gstatic.com; img-src 'self' data: https:; connect-src 'self' https://www.clarity.ms https://s.clarity.ms https://c.clarity.ms https://*.clarity.ms https://www.google-analytics.com https://stats.g.doubleclick.net https://analytics.google.com;"
</IfModule>

# JavaScriptのMIMEタイプを適切に設定
<IfModule mod_mime.c>
  AddType application/javascript .js
  AddType application/json .json
  
  # デバッグ用設定
  <IfDefine DEBUG>
    # デバッグモード時にJSファイルをテキストとして配信
    RemoveType .js
    AddType text/plain .js
  </IfDefine>
</IfModule>

# 末尾のスラッシュに関する設定
# ディレクトリアクセス時の自動的なスラッシュ追加を無効化
DirectorySlash Off

# mod_rewriteが利用可能な場合のみリダイレクト設定を有効にする
<IfModule mod_rewrite.c>
  # リダイレクト処理を記録
  RewriteLog "/tmp/rewrite.log"
  RewriteLogLevel 3
  
  RewriteEngine On
  
  # デバッグ情報を環境変数に設定
  RewriteRule .* - [E=DEBUG_REQ:%{REQUEST_URI}]
  
  # リクエストヘッダーをデバッグ用環境変数に設定
  RewriteCond %{HTTP:Accept-Encoding} gzip
  RewriteRule .* - [E=SUPPORTS_GZIP:true]
  
  # 末尾のスラッシュを削除（lp以下のパスに対して）
  RewriteCond %{REQUEST_URI} ^/lp/(.+)/$ [NC]
  RewriteRule ^lp/(.*)/$ /lp/$1 [R=301,L]
  
  # 末尾スラッシュなしでもディレクトリ内のindex.htmlを表示
  RewriteCond %{REQUEST_FILENAME} -d
  RewriteCond %{REQUEST_FILENAME}/index.html -f
  RewriteRule ^(.*)$ $1/index.html [L]
  
  # HTTPをHTTPSにリダイレクト
  RewriteCond %{HTTPS} off
  RewriteRule ^(.*)$ https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301]
  
  # wwwなしのドメインにリダイレクト
  RewriteCond %{HTTP_HOST} ^www\.(.+)$ [NC]
  RewriteRule ^(.*)$ https://%1%{REQUEST_URI} [L,R=301]
  
  # URLが実在するファイルやディレクトリを指していない場合に404を表示
  RewriteCond %{REQUEST_FILENAME} !-f
  RewriteCond %{REQUEST_FILENAME} !-d
  RewriteRule ^(.*)$ /404.html [L,R=404]
  
  # 一般的な画像ファイルに対する処理
  <IfModule mod_headers.c>
    <FilesMatch "\.(ico|pdf|jpg|jpeg|png|webp|gif|svg)$">
      Header set Cache-Control "max-age=2592000, public"
    </FilesMatch>
  </IfModule>

  RewriteBase /
  # 静的ファイルが存在しない場合はHTMLを優先
  RewriteCond %{REQUEST_FILENAME} !-f
  RewriteCond %{REQUEST_FILENAME} !-d
  RewriteCond %{REQUEST_FILENAME}.html -f
  RewriteRule ^(.*)$ $1.html [L]
</IfModule>

# Gzip圧縮
<IfModule mod_deflate.c>
  AddOutputFilterByType DEFLATE text/html text/plain text/xml text/css application/javascript application/json
  BrowserMatch ^Mozilla/4 gzip-only-text/html
  BrowserMatch ^Mozilla/4\.0[678] no-gzip
  BrowserMatch \bMSIE !no-gzip !gzip-only-text/html
  
  # デバッグ用ヘッダー
  <IfModule mod_headers.c>
    Header append Vary User-Agent env=!dont-vary
    Header set X-Compressed "true"
  </IfModule>
</IfModule> 